<%= ERB.new(File.read(File.expand_path("_header.erb",File.dirname(file)))).result(binding) -%>

[
  {rabbit, [
<% if @ldap_auth -%>
    {auth_backends, [rabbit_auth_backend_internal, rabbit_auth_backend_ldap]},
<% end -%>
<% if @config_cluster -%>
    {cluster_nodes, {[<%= @_cluster_nodes.map { |n| "\'rabbit@#{n}\'" }.join(', ') %>], <%= @cluster_node_type %>}},
    {cluster_partition_handling, <%= @cluster_partition_handling %>},
<% end -%>
<% if !@ip.empty? -%>
    {tcp_listeners, [
    <%- @ip.sort.each_with_index do |addr, i| -%>
        {"<%= addr %>", <%= @port %>}<%= ',' if i < (@ip.size - 1) %>
    <%- end -%>
    ]},
<%- else -%>
    {tcp_listeners, [<%= @port %>]},
<%- end -%>
<%- if @ssl %>
<%- if !@ssl_ip.empty? -%>
    {ssl_listeners, [
    <%- @ssl_ip.sort.each_with_index do |addr, i| -%>
        {"<%= addr %>", <%= @ssl_port %>}<%= ',' if i < (@ssl_ip.size - 1) %>
    <%- end -%>
    ]},
<%- else -%>
    {ssl_listeners, [<%= @ssl_port %>]},
<%- end -%>
    {ssl_options, [{cacertfile,"<%= @ssl_cacert %>"},
                    {certfile,"<%= @ssl_cert %>"},
                    {keyfile,"<%= @ssl_key %>"},
                    {verify,<%= @ssl_verify %>},
                    {fail_if_no_peer_cert,<%= @ssl_fail_if_no_peer_cert %>}]},
<%- end -%>
<% if @config_variables -%>
<%- @config_variables.keys.sort.each do |key| -%>
    {<%= key %>, <%= @config_variables[key] %>},
<%- end -%>
<%- end -%>
    {default_user, <<"<%= @default_user %>">>},
    {default_pass, <<"<%= @default_pass %>">>}
  ]}
<% if @admin_enable -%>,
% Configure the management interface/plugin
  {rabbitmq_management, [
    {redirect_old_port, false},
    {listener, [
      {port, <%= @management_port %>}
    <%- if !@management_ip.empty? %>,
        {ip, "<%= @management_ip %>"}
    <%- end -%>
    <%- if @ssl_management -%>,
      {ssl, true}
    <%- end -%>
    ]}
  ]}
<% end -%>
<% if @config_stomp -%>,
% Configure the Stomp Plugin listening port
  {rabbitmq_stomp, [
  <%- if !@stomp_ip.empty? -%>
    {tcp_listeners, [
    <%- @stomp_ip.sort.each_with_index do |addr, i| -%>
        {"<%= addr %>", <%= @stomp_port %>}<%= ',' if i < (@stomp_ip.size - 1) %>
    <%- end -%>
    ]}
  <%- else -%>
    {tcp_listeners, [<%= @stomp_port %>]}
  <%- end -%>
  <%- if @ssl_stomp_port -%>,
    <%- if !@ssl_stomp_ip.empty? -%>,
    {ssl_listeners, [
    <%- @ssl_stomp_ip.sort.each_with_index do |addr, i| -%>
        {"<%= addr %>", <%= @ssl_stomp_port %>}<%= ',' if i < (@ssl_stomp_ip.size - 1) %>
    <%- end -%>
    ]}
    <%- else -%>
    {ssl_listeners, [<%= @ssl_stomp_port %>]}
    <%- end -%>
  <%- end -%>
  ]}
<% end -%>
<%- if @ldap_auth -%>,
% Configure the LDAP authentication plugin
  {rabbitmq_auth_backend_ldap, [
    {other_bind, anon},
    {servers, ["<%= @ldap_server %>"]},
    {user_dn_pattern, "<%= @ldap_user_dn_pattern %>"},
    {use_ssl, <%= @ldap_use_ssl %>},
    {port, <%= @ldap_port %>},
    {log, <%= @ldap_log %>}
  ]}
<%- end -%>
<%- if @config_shovel -%>,
% Configure the shovel plugin
  {rabbitmq_shovel, [
    {shovels, [
      {<%= @shovel_name %>, [
        {sources, [
          {broker, "<%= @shovel_src_broker %>"},
          {declarations, [
            {'exchange.declare', [
              {exchange, <<"<%= @shovel_exchange %>">>},
              {type, <<"direct">>},
              durable
            ]},
            {'queue.declare', [
              {queue, <<"<%= @shovel_src_queue %>">>},
              durable
            ]},
            {'queue.bind', [
              {exchange, <<"<%= @shovel_exchange %>">>},
              {queue, <<"<%= @shovel_src_queue %>">>},
              {routing_key, <<"<%= @shovel_routing_key %>">>}
            ]}
          ]}
        ]},

        {destinations, [
          {broker, "<%= @shovel_dst_broker %>"},
          {declarations, [
            {'exchange.declare', [
              {exchange, <<"<%= @shovel_exchange %>">>},
              {type, <<"direct">>},
              durable
            ]},
            {'queue.declare', [
              {queue, <<"<%= @shovel_dst_queue %>">>},
              durable
            ]},
            {'queue.bind', [
              {exchange, <<"<%= @shovel_exchange %>">>},
              {queue, <<"<%= @shovel_dst_queue %>">>},
              {routing_key, <<"<%= @shovel_routing_key %>">>}
            ]}
          ]}
        ]},

        {queue, <<"<%= @shovel_src_queue %>">>},
        {ack_mode, on_confirm},
        {publish_properties, [
          {delivery_mode, 2}
        ]},
        {publish_fields, [
          {exchange, <<"<%= @shovel_exchange %>">>},
          {routing_key, <<"<%= @shovel_routing_key %>">>}
        ]},
        {reconnect_delay, 6}
      ]}
    ]}
  ]}
<%- end -%>
].
% EOF
